[0;31m---------------------------------------------------------------------------[0m
[0;31mgaierror[0m                                  Traceback (most recent call last)
[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36mdo_open[0;34m(self, http_class, req, **http_conn_args)[0m
[1;32m   1318[0m                 h.request(req.get_method(), req.selector, req.data, headers,
[0;32m-> 1319[0;31m                           encode_chunked=req.has_header('Transfer-encoding'))
[0m[1;32m   1320[0m             [0;32mexcept[0m [0mOSError[0m [0;32mas[0m [0merr[0m[0;34m:[0m [0;31m# timeout error[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36mrequest[0;34m(self, method, url, body, headers, encode_chunked)[0m
[1;32m   1251[0m         [0;34m"""Send a complete request to the server."""[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1252[0;31m         [0mself[0m[0;34m.[0m[0m_send_request[0m[0;34m([0m[0mmethod[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0mbody[0m[0;34m,[0m [0mheaders[0m[0;34m,[0m [0mencode_chunked[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1253[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36m_send_request[0;34m(self, method, url, body, headers, encode_chunked)[0m
[1;32m   1297[0m             [0mbody[0m [0;34m=[0m [0m_encode[0m[0;34m([0m[0mbody[0m[0;34m,[0m [0;34m'body'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1298[0;31m         [0mself[0m[0;34m.[0m[0mendheaders[0m[0;34m([0m[0mbody[0m[0;34m,[0m [0mencode_chunked[0m[0;34m=[0m[0mencode_chunked[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1299[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36mendheaders[0;34m(self, message_body, encode_chunked)[0m
[1;32m   1246[0m             [0;32mraise[0m [0mCannotSendHeader[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1247[0;31m         [0mself[0m[0;34m.[0m[0m_send_output[0m[0;34m([0m[0mmessage_body[0m[0;34m,[0m [0mencode_chunked[0m[0;34m=[0m[0mencode_chunked[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1248[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36m_send_output[0;34m(self, message_body, encode_chunked)[0m
[1;32m   1025[0m         [0;32mdel[0m [0mself[0m[0;34m.[0m[0m_buffer[0m[0;34m[[0m[0;34m:[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1026[0;31m         [0mself[0m[0;34m.[0m[0msend[0m[0;34m([0m[0mmsg[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1027[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36msend[0;34m(self, data)[0m
[1;32m    965[0m             [0;32mif[0m [0mself[0m[0;34m.[0m[0mauto_open[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 966[0;31m                 [0mself[0m[0;34m.[0m[0mconnect[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    967[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36mconnect[0;34m(self)[0m
[1;32m   1413[0m [0;34m[0m[0m
[0;32m-> 1414[0;31m             [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mconnect[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1415[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/http/client.py[0m in [0;36mconnect[0;34m(self)[0m
[1;32m    937[0m         self.sock = self._create_connection(
[0;32m--> 938[0;31m             (self.host,self.port), self.timeout, self.source_address)
[0m[1;32m    939[0m         [0mself[0m[0;34m.[0m[0msock[0m[0;34m.[0m[0msetsockopt[0m[0;34m([0m[0msocket[0m[0;34m.[0m[0mIPPROTO_TCP[0m[0;34m,[0m [0msocket[0m[0;34m.[0m[0mTCP_NODELAY[0m[0;34m,[0m [0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/socket.py[0m in [0;36mcreate_connection[0;34m(address, timeout, source_address)[0m
[1;32m    706[0m     [0merr[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 707[0;31m     [0;32mfor[0m [0mres[0m [0;32min[0m [0mgetaddrinfo[0m[0;34m([0m[0mhost[0m[0;34m,[0m [0mport[0m[0;34m,[0m [0;36m0[0m[0;34m,[0m [0mSOCK_STREAM[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    708[0m         [0maf[0m[0;34m,[0m [0msocktype[0m[0;34m,[0m [0mproto[0m[0;34m,[0m [0mcanonname[0m[0;34m,[0m [0msa[0m [0;34m=[0m [0mres[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/socket.py[0m in [0;36mgetaddrinfo[0;34m(host, port, family, type, proto, flags)[0m
[1;32m    751[0m     [0maddrlist[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 752[0;31m     [0;32mfor[0m [0mres[0m [0;32min[0m [0m_socket[0m[0;34m.[0m[0mgetaddrinfo[0m[0;34m([0m[0mhost[0m[0;34m,[0m [0mport[0m[0;34m,[0m [0mfamily[0m[0;34m,[0m [0mtype[0m[0;34m,[0m [0mproto[0m[0;34m,[0m [0mflags[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    753[0m         [0maf[0m[0;34m,[0m [0msocktype[0m[0;34m,[0m [0mproto[0m[0;34m,[0m [0mcanonname[0m[0;34m,[0m [0msa[0m [0;34m=[0m [0mres[0m[0;34m[0m[0;34m[0m[0m

[0;31mgaierror[0m: [Errno 8] nodename nor servname provided, or not known

During handling of the above exception, another exception occurred:

[0;31mURLError[0m                                  Traceback (most recent call last)
[0;32m~/dev/virus/dataset/icu/hospital.py[0m in [0;36m<module>[0;34m[0m
[1;32m     35[0m [0;34m[0m[0m
[1;32m     36[0m [0;34m[0m[0m
[0;32m---> 37[0;31m [0mcheck_update[0m[0;34m([0m[0mlatest_file[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     38[0m [0;34m[0m[0m
[1;32m     39[0m [0;34m[0m[0m

[0;32m~/dev/virus/dataset/icu/hospital.py[0m in [0;36mcheck_update[0;34m(latest_file)[0m
[1;32m     23[0m [0;32mdef[0m [0mcheck_update[0m[0;34m([0m[0mlatest_file[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m     [0murl[0m [0;34m=[0m [0;34m'https://services7.arcgis.com/LXCny1HyhQCUSueu/ArcGIS/rest/services/Definitive_Healthcare_USA_Hospital_Beds/FeatureServer/0'[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 25[0;31m     [0minfo[0m [0;34m=[0m [0mBeautifulSoup[0m[0;34m([0m[0murlopen[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m,[0m[0;34m'html.parser'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     26[0m     [0mLastUpdate[0m [0;34m=[0m [0;34m[[0m[0ml[0m [0;32mfor[0m [0ml[0m [0;32min[0m [0;34m[[0m[0ml[0m [0;32mfor[0m [0ml[0m [0;32min[0m [0minfo[0m[0;34m.[0m[0mget_text[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m'\n'[0m[0;34m)[0m [0;32mif[0m [0ml[0m[0;34m][0m [0;32mif[0m [0;34m'Last'[0m [0;32min[0m [0ml[0m[0;34m][0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m': '[0m[0;34m)[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     27[0m     [0mLastUpdate[0m [0;34m=[0m [0mdatetime[0m[0;34m.[0m[0mstrptime[0m[0;34m([0m[0mLastUpdate[0m[0;34m,[0m[0;34m'%m/%d/%Y %I:%M:%S %p'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    220[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    221[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 222[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    223[0m [0;34m[0m[0m
[1;32m    224[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    523[0m             [0mreq[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    524[0m [0;34m[0m[0m
[0;32m--> 525[0;31m         [0mresponse[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_open[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    526[0m [0;34m[0m[0m
[1;32m    527[0m         [0;31m# post-process response[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36m_open[0;34m(self, req, data)[0m
[1;32m    541[0m         [0mprotocol[0m [0;34m=[0m [0mreq[0m[0;34m.[0m[0mtype[0m[0;34m[0m[0;34m[0m[0m
[1;32m    542[0m         result = self._call_chain(self.handle_open, protocol, protocol +
[0;32m--> 543[0;31m                                   '_open', req)
[0m[1;32m    544[0m         [0;32mif[0m [0mresult[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    545[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    501[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    502[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 503[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    504[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    505[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36mhttps_open[0;34m(self, req)[0m
[1;32m   1360[0m         [0;32mdef[0m [0mhttps_open[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1361[0m             return self.do_open(http.client.HTTPSConnection, req,
[0;32m-> 1362[0;31m                 context=self._context, check_hostname=self._check_hostname)
[0m[1;32m   1363[0m [0;34m[0m[0m
[1;32m   1364[0m         [0mhttps_request[0m [0;34m=[0m [0mAbstractHTTPHandler[0m[0;34m.[0m[0mdo_request_[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/franke/lib/python3.7/urllib/request.py[0m in [0;36mdo_open[0;34m(self, http_class, req, **http_conn_args)[0m
[1;32m   1319[0m                           encode_chunked=req.has_header('Transfer-encoding'))
[1;32m   1320[0m             [0;32mexcept[0m [0mOSError[0m [0;32mas[0m [0merr[0m[0;34m:[0m [0;31m# timeout error[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1321[0;31m                 [0;32mraise[0m [0mURLError[0m[0;34m([0m[0merr[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1322[0m             [0mr[0m [0;34m=[0m [0mh[0m[0;34m.[0m[0mgetresponse[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1323[0m         [0;32mexcept[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mURLError[0m: <urlopen error [Errno 8] nodename nor servname provided, or not known>
